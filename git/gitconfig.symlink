[user]
	name = Matt Felten
	email = m@mattfelten.com

[core]
	editor = nano
	excludesfile = ~/.gitignore

[mergetool]
	keepBackup = true
	prompt = false

[color]
	ui = true
	diff = true
	pager = true
	status = auto
	branch = auto
	interactive = auto

[alias]
	## Shorthand
	aa = add -A
	ap = add -p
	co = checkout
	br = branch
	bra = branch -a
	c = commit
	g = grep --break --heading --line-number
	st = status
	ss = status -sy
	mr = "!glab mr create"
	pr = "!gh pr create"
	prw = "!gh pr create --web"

	## Add all and check status
	a = !git add -A && git status

	# Get the current branch name (not so useful in itself, but used in other aliases)
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	## Quick amend without rewording
	ca = commit --amend --no-edit --no-verify

	## Remove old branches, clean untracked files, clear stash
	cleanup = !git remote prune origin && git gc && git clean -dfx && git stash clear

	## Show a list of commits in a branch with coloring
	ls = log --pretty=format:"%C(yellow)%h\\ %C(cyan)%ad%Cred%d\\ %Creset%s%C(magenta)\\ [%an]" --decorate --date=relative -20

	## Unstage all files and reword commit message
	rw = !git reset && git commit --amend

	## Uncommit last commit. Keep changes
	uc = reset HEAD^

	## Create working commit. Use this like stash but permanent to your branch
	wc = !git add -A && git commit -m 'Working Commit' --no-verify

	; `git start <local branch>` automatically tracks origin/<default branch>
	; `git start <local branch> <tracked branch>`
	start = "!start() {\
			defaultbranch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@');\
			newbranch=$1;\
			[ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
			trackedbranch=$2;\
			[ -z $trackedbranch ] && trackedbranch='origin/'$defaultbranch;\
			git checkout -b $newbranch --track $trackedbranch;\
	};\
	start"

	; git finish <branch to delete>
	finish = "!finish() {\
			defaultbranch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@');\
			deletebranch=$1;\
			[ -z $deletebranch ] &&\
					deletebranch=$(git for-each-ref --format='%(refname:short)'\
							$(git symbolic-ref HEAD));\
			[[ \"$deletebranch\" == \"$defaultbranch\" ]] &&\
					echo \"Can't delete $defaultbranch\" && exit 1;\
			git checkout $defaultbranch &&\
			git pull --rebase &&\
			git branch -D $deletebranch;\
	};\
	finish"

	; git rework [<number_of_commits> | <commit_id>]
	; shorthand alias to rebase
	; git rework 8 -> git rebase -i HEAD~8
	; git rework cfd8327 -> git rebase -i cfd8327^
	rework = "!rework() {\
		commitid=$1;\
		[ -z $commitid ] && exit;\
		{\
			[[ $commitid =~ ^[0-9]{1,2}$ ]] && commitid=\"HEAD~$commitid\";\
		}\
			||\
		commitid=\"$commitid^\";\
		git rebase -i $commitid;\
	};\
	rework"
	undo = !legit undo
	switch = !legit switch
	sync = !legit sync
	publish = !legit publish
	unpublish = !legit unpublish
	branches = !legit branches
	s = switch

[credential]
	helper = osxkeychain

[push]
	default = simple
[pull]
	rebase = true
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[fetch]
	prune = true
[pager]
	branch = false
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[credential "https://github.com"]
	username = mattfelten
[init]
	defaultBranch = main
[rebase]
	autoStash = true
